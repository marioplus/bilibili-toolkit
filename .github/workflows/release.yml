name: Optimized Deploy to GitHub Releases
on:
  push:
    branches: [ master ]
jobs:
  # 第一阶段：从 CHANGELOG.md 提取版本号和变更日志
  extract-metadata:
    name: Extract Version and Changelog
    runs-on: ubuntu-latest
    outputs:
      # 输出版本号
      version: ${{ steps.extract.outputs.version }}
      # 输出变更日志
      changelog: ${{ steps.extract.outputs.changelog }}
      # 输出产物名称
      artifact: ${{ steps.extract.outputs.artifact }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract Metadata
        id: extract
        run: |
          # 校验 CHANGELOG.md 文件是否存在
          if [ ! -f CHANGELOG.md ]; then
            echo "::error::CHANGELOG.md not found"
            exit 1
          fi

          # 从 CHANGELOG.md 提取版本号 (格式: ## vX.Y.Z)
          VERSION=$(awk '/^## v[0-9]/{match($0, /## v([0-9.]+)/, arr); print arr[1]; exit}' CHANGELOG.md)
          
          # 提取变更日志
          START_LINE=$(grep -n '^## v' CHANGELOG.md | head -n 1 | cut -d: -f1)
          END_LINE=$(grep -n '^## v' CHANGELOG.md | sed -n '2p' | cut -d: -f1)
          
          if [ -z "$END_LINE" ]; then
            CHANGELOG=$(sed -n "${START_LINE},\$p" CHANGELOG.md)
          else
          CHANGELOG=$(sed -n "$((START_LINE - 1)),$((END_LINE - 1))p" CHANGELOG.md)
          fi
          
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "changelog<<$EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "artifact=$(basename "${{ github.repository }}").user.js" >> $GITHUB_OUTPUT

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: extract-metadata
    steps:
      - uses: actions/checkout@v4

      # 缓存 node_modules 加速构建
      - uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - run: npm ci
      - run: npm run build

      # 上传构建产物供后续使用
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.extract-metadata.outputs.artifact }}
          path: dist/*
          # 如果无文件则报错
          if-no-files-found: error
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [ extract-metadata, build ]
    permissions:
      contents: write  # 需要写入权限
    steps:
      - uses: actions/checkout@v4

      # 下载构建产物到固定目录
      - uses: actions/download-artifact@v4
        with:
          name: ${{ needs.extract-metadata.outputs.artifact }}
          path: ./release_assets

      # 使用 GitHub API 创建/更新 Release
      - name: Upsert Release via API
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: v${{ needs.extract-metadata.outputs.version }}
        run: |
          # 删除现有草稿（可选）
               gh api repos/${{ github.repository }}/releases \
               --jq '.[] | select(.draft == true) | .id' \
               | xargs -I '{}' gh api -X DELETE repos/${{ github.repository }}/releases/{} || true

          # 创建发布草稿
               gh release create v${{ needs.extract-metadata.outputs.version }} \
               --draft \
               --title "v${{ needs.extract-metadata.outputs.version }}" \
               --notes "${{ needs.extract-metadata.outputs.changelog }}" \
               release_assets/*
