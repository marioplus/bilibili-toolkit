name: 发布草稿
on:
  push:
    branches: [ master ]
jobs:
  pre-check:
    name: 预检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      - name: 验证必要文件
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "::error::CHANGELOG.md 文件不存在"
            exit 1
          fi
          
          if [ ! -f package.json ]; then
            echo "::error::package.json 文件不存在"
            exit 1
          fi
          
          echo "所有必需文件验证通过"

  extract-metadata:
    name: 提取元数据
    runs-on: ubuntu-latest
    needs: pre-check
    outputs:
      # 输出版本号
      version: ${{ steps.extract.outputs.version }}
      # 输出变更日志
      changelog: ${{ steps.extract.outputs.changelog }}
      # 输出产物名称
      artifact: ${{ steps.extract.outputs.artifact }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 提取版本号和变更日志
        id: extract
        run: |
          # 从 CHANGELOG.md 提取版本号 (格式: ## vX.Y.Z)
          VERSION=$(grep -E '^## v[0-9]+\.[0-9]+\.[0-9]+' CHANGELOG.md | head -n 1 | sed -E 's/## v([0-9.]+).*/\1/')
          if [ -z "$VERSION" ]; then
            echo "::error::无法从 CHANGELOG.md 提取有效版本号"
            exit 1
          fi
          
          # 提取变更日志内容
          START_LINE=$(grep -n '^## v' CHANGELOG.md | head -n 1 | cut -d: -f1)
          END_LINE=$(grep -n '^## v' CHANGELOG.md | sed -n '2p' | cut -d: -f1)
          
          if [ -z "$END_LINE" ]; then
            CHANGELOG=$(sed -n "${START_LINE},\$p" CHANGELOG.md)
          else
          CHANGELOG=$(sed -n "${START_LINE},$((END_LINE - 1))p" CHANGELOG.md)
          fi
          
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "changelog<<$EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "artifact=$(basename "${{ github.repository }}").user.js" >> $GITHUB_OUTPUT
  
          

  build:
    name: 构建项目
    runs-on: ubuntu-latest
    needs: extract-metadata
    steps:
      - name: 检出
        uses: actions/checkout@v4

      - name: 缓存 node_modules 加速构建
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: 设置 node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: 构建
        run: npm ci && npm run build

      - name: 验证构建产物
        run: |
          artifact="${{ needs.extract-metadata.outputs.artifact }}"
          if [ ! -f dist/$artifact ]; then
            echo "::error::构建产物 $artifact 不存在"
            exit 1
          fi
          echo "构建产物验证通过"
          ls -la dist/

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.extract-metadata.outputs.artifact }}
          path: dist/${{ needs.extract-metadata.outputs.artifact }}
          # 如果无文件则报错
          if-no-files-found: error

  release:
    name: 创建发布
    runs-on: ubuntu-latest
    needs: [ extract-metadata, build ]
    permissions:
      contents: write  # 需要写入权限
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.extract-metadata.outputs.artifact }}
          path: ./release_assets

      - name: 验证下载的产物
        run: |
          artifact="${{ needs.extract-metadata.outputs.artifact }}"
          if [ ! -f release_assets/$artifact ]; then
            echo "::error::下载的构建产物 $artifact 不存在"
            exit 1
          fi
          echo "构建产物验证通过"

      # 使用 GitHub API 创建/更新 Release
      - name: 删除之前的草稿
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          draftTag=$(gh release list \
            --json name,isDraft \
            --jq ".[] | select (.isDraft == true) | .name")
          echo "草稿标记：$draftTag"
          
          # 删除现有草稿
          if [ -n "$draftTag" ]; then
            echo "清理旧草稿"
            gh release delete $draftTag --yes
          fi
          
          # 创建发布草稿
          gh release create v${{ needs.extract-metadata.outputs.version }} \
            --draft \
            --title "v${{ needs.extract-metadata.outputs.version }}" \
            --notes "${{ needs.extract-metadata.outputs.changelog }}" \
            release_assets/${{ needs.extract-metadata.outputs.artifact }}
